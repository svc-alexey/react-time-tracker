{"ast":null,"code":"const NEW_WORKLOG = 'NEW_WORKLOG';\nconst DELETE_WORKLOG = 'DELETE_WORKLOG';\nconst COPY_WORKLOG = 'COPY_WORKLOG';\nconst initialState = {\n  issues: [{\n    time: {\n      from: '09:00',\n      by: '10:00'\n    },\n    label: 'JRM-310',\n    name: 'Team standup',\n    timer: '01:00:00',\n    id: 99\n  }]\n};\nexport default function issuesReducer(state = initialState, action) {\n  let issues = [...state.issues];\n\n  switch (action.type) {\n    case NEW_WORKLOG:\n      function formatTime(time) {\n        let from = Math.trunc(time[0] / 60);\n        let from2 = time[0] % 60;\n        let by = Math.trunc(time[1] / 60);\n        let by2 = time[1] % 60;\n\n        if (time[0] < 600) {\n          from = '0' + from;\n        }\n\n        if (time[1] < 600) {\n          by = '0' + by;\n        }\n\n        if (from2 === 0) {\n          from2 = '0' + from2;\n        }\n\n        if (by2 === 0) {\n          by2 = '0' + by2;\n        }\n\n        let fromResult = from + ':' + from2;\n        let byResult = by + ':' + by2;\n        return [fromResult, byResult];\n      }\n\n      let resultTime = formatTime(action.payload.sliderValue);\n      let from = resultTime[0];\n      let by = resultTime[1];\n\n      let formatStopwatchTime = time => {\n        let seconds = time % 60;\n        let minutes = Math.trunc(time / 60 % 60);\n        let hour = Math.trunc(time / 3600 % 24);\n\n        if (hour < 10) {\n          hour = '0' + hour;\n        }\n\n        if (minutes < 10) {\n          minutes = '0' + minutes;\n        }\n\n        if (seconds < 10) {\n          seconds = '0' + seconds;\n        }\n\n        let stopWatchTime = hour + ':' + minutes + ':' + seconds;\n        return stopWatchTime;\n      };\n\n      let stopwatchTime = formatStopwatchTime(action.payload.stopwatchTime);\n\n      function getRandomArbitrary(min, max) {\n        return Math.random() * (max - min) + min;\n      }\n\n      let calculateId = getRandomArbitrary(0, 10);\n      issues.push({\n        time: {\n          from: from,\n          by: by\n        },\n        label: action.payload.label,\n        name: action.payload.issue,\n        timer: stopwatchTime,\n        id: calculateId\n      });\n      return { ...state,\n        issues\n      };\n\n    case DELETE_WORKLOG:\n      issues = issues.filter(item => item.id !== action.payload.id);\n      return { ...state,\n        issues\n      };\n\n    case COPY_WORKLOG:\n      debugger;\n      let initialLabel = action.payload.label;\n      let initialName = action.payload.name;\n      return { ...state,\n        initialLabel,\n        initialName\n      };\n\n    default:\n      return state;\n  }\n}\nexport const submitForm = (stopwatchTime, sliderValue, label, issue) => ({\n  type: NEW_WORKLOG,\n  payload: {\n    stopwatchTime,\n    sliderValue,\n    label,\n    issue\n  }\n});\nexport const deleteWorklog = id => ({\n  type: DELETE_WORKLOG,\n  payload: {\n    id\n  }\n});\nexport const copyWorklog = (label, name) => ({\n  type: COPY_WORKLOG,\n  payload: {\n    label,\n    name\n  }\n});","map":{"version":3,"sources":["/home/alexeyko/Documents/React-tracker/src/store/reducers/issuesReducer.js"],"names":["NEW_WORKLOG","DELETE_WORKLOG","COPY_WORKLOG","initialState","issues","time","from","by","label","name","timer","id","issuesReducer","state","action","type","formatTime","Math","trunc","from2","by2","fromResult","byResult","resultTime","payload","sliderValue","formatStopwatchTime","seconds","minutes","hour","stopWatchTime","stopwatchTime","getRandomArbitrary","min","max","random","calculateId","push","issue","filter","item","initialLabel","initialName","submitForm","deleteWorklog","copyWorklog"],"mappings":"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","sourcesContent":["const NEW_WORKLOG = 'NEW_WORKLOG';\nconst DELETE_WORKLOG = 'DELETE_WORKLOG';\nconst COPY_WORKLOG = 'COPY_WORKLOG';\n\nconst initialState = {\n    issues: [\n        {\n            time: {\n                from: '09:00',\n                by: '10:00'\n            },\n            label: 'JRM-310',\n            name: 'Team standup',\n            timer: '01:00:00',\n            id: 99\n        },\n    ],\n}\n\nexport default function issuesReducer(state = initialState, action) {\n    let issues = [...state.issues];\n    switch (action.type) {\n        case NEW_WORKLOG:\n\n        function formatTime(time) {\n            let from = Math.trunc(time[0] / 60);\n            let from2 = time[0] % 60;\n            let by = Math.trunc(time[1] / 60);\n            let by2 = time[1] % 60;\n\n            if (time[0] < 600) {\n                from = '0' + from;\n            }\n            if (time[1] < 600) {\n                by = '0' + by;\n            }\n            if (from2 === 0) {\n                from2 = '0' + from2;\n            }\n            if (by2 === 0) {\n                by2 = '0' + by2;\n            }\n\n            let fromResult = from + ':' + from2;\n            let byResult = by + ':' + by2;\n            return [fromResult, byResult];\n        }\n\n            let resultTime = formatTime(action.payload.sliderValue);\n            let from = resultTime[0];\n            let by = resultTime[1];\n\n            let formatStopwatchTime = (time) => {\n                let seconds = time % 60;\n                let minutes = Math.trunc(time / 60 % 60);\n                let hour = Math.trunc(time / 3600 % 24);\n                if (hour < 10) {\n                    hour = '0' + hour\n                }\n                if (minutes < 10) {\n                    minutes = '0' + minutes\n                }\n                if (seconds < 10) {\n                    seconds = '0' + seconds\n                }\n                let stopWatchTime = hour + ':' + minutes + ':' + seconds;\n                return stopWatchTime;\n            }\n\n            let stopwatchTime = formatStopwatchTime(action.payload.stopwatchTime);\n\n        function getRandomArbitrary(min, max) {\n            return Math.random() * (max - min) + min;\n        }\n\n            let calculateId = getRandomArbitrary(0, 10);\n\n            issues.push(\n                {\n                    time: {\n                        from: from,\n                        by: by\n                    },\n                    label: action.payload.label,\n                    name: action.payload.issue,\n                    timer: stopwatchTime,\n                    id: calculateId\n                });\n            return {\n                ...state,\n                issues\n            };\n        case DELETE_WORKLOG:\n            issues = issues.filter(item => item.id !== action.payload.id);\n            return {\n                ...state,\n                issues\n            };\n        case COPY_WORKLOG:\n            debugger\n            let initialLabel = action.payload.label;\n                let initialName = action.payload.name;\n            return {\n                ...state,\n                initialLabel,\n                initialName\n            };\n        default:\n            return state;\n    }\n}\n\nexport const submitForm = (stopwatchTime, sliderValue, label, issue) => ({\n    type: NEW_WORKLOG, payload: {stopwatchTime, sliderValue, label, issue}\n});\n\nexport const deleteWorklog = (id) => ({\n    type: DELETE_WORKLOG, payload: {id}\n});\n\nexport const copyWorklog = (label, name) => ({\n    type: COPY_WORKLOG, payload: {label, name}\n});"]},"metadata":{},"sourceType":"module"}