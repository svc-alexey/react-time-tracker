{"ast":null,"code":"var _jsxFileName = \"/home/alexeyko/Documents/React-tracker/src/components/Main/Tracker/TimerNew/Stopwatch/Stopwatch.jsx\";\nimport React, { useState } from 'react';\nimport s from './Stopwatch.module.css';\nimport { Field, reduxForm } from \"redux-form\";\nimport { Input } from \"../../../../common/Forms/FormsControl\";\n\nconst Stopwatch = () => {\n  const [second, setSecond] = useState(\"00\");\n  const [minute, setMinute] = useState(\"00\");\n  const [hour, setHour] = useState(\"00\");\n  const [isActive, setIsActive] = useState(false);\n  const [counter, setCounter] = useState(1000);\n  useEffect(() => {\n    let intervalId;\n\n    if (isActive) {\n      intervalId = setInterval(() => {\n        const secondCounter = counter % 60;\n        const minuteCounter = Math.floor(counter / 60);\n        const hourCounter = Math.floor(minuteCounter / 60);\n        let computedSecond = String(secondCounter).length === 1 ? `0${secondCounter}` : secondCounter;\n        let computedMinute = String(minuteCounter).length === 1 ? `0${minuteCounter}` : minuteCounter;\n        let computedHour = String(hourCounter).length === 1 ? `0${hourCounter}` : hourCounter;\n        setSecond(computedSecond);\n        setMinute(computedMinute);\n        setHour(computedHour);\n        setCounter(counter => counter + 1);\n      }, 1000);\n    }\n\n    return () => clearInterval(intervalId);\n  }, [isActive, counter]);\n\n  function stopTimer() {\n    console.log(counter);\n    setIsActive(false);\n    setCounter(0);\n    setSecond(\"00\");\n    setMinute(\"00\");\n    setHour(\"00\");\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: s.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: s.time,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: s.hour,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 17\n    }\n  }, hour), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 17\n    }\n  }, \":\"), /*#__PURE__*/React.createElement(\"span\", {\n    className: s.minute,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 17\n    }\n  }, minute), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 17\n    }\n  }, \":\"), /*#__PURE__*/React.createElement(\"span\", {\n    className: s.second,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 17\n    }\n  }, second)));\n};\n\nexport default Stopwatch;","map":{"version":3,"sources":["/home/alexeyko/Documents/React-tracker/src/components/Main/Tracker/TimerNew/Stopwatch/Stopwatch.jsx"],"names":["React","useState","s","Field","reduxForm","Input","Stopwatch","second","setSecond","minute","setMinute","hour","setHour","isActive","setIsActive","counter","setCounter","useEffect","intervalId","setInterval","secondCounter","minuteCounter","Math","floor","hourCounter","computedSecond","String","length","computedMinute","computedHour","clearInterval","stopTimer","console","log","container","time"],"mappings":"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","sourcesContent":["import React, {useState} from 'react';\nimport s from './Stopwatch.module.css';\nimport {Field, reduxForm} from \"redux-form\";\nimport {Input} from \"../../../../common/Forms/FormsControl\";\n\n\nconst Stopwatch = () => {\n    const [second, setSecond] = useState(\"00\");\n    const [minute, setMinute] = useState(\"00\");\n    const [hour, setHour] = useState(\"00\");\n    const [isActive, setIsActive] = useState(false);\n    const [counter, setCounter] = useState(1000);\n\n    useEffect(() => {\n        let intervalId;\n\n        if (isActive) {\n            intervalId = setInterval(() => {\n                const secondCounter = counter % 60;\n                const minuteCounter = Math.floor(counter / 60);\n                const hourCounter = Math.floor(minuteCounter / 60);\n\n                let computedSecond =\n                    String(secondCounter).length === 1\n                        ? `0${secondCounter}`\n                        : secondCounter;\n                let computedMinute =\n                    String(minuteCounter).length === 1\n                        ? `0${minuteCounter}`\n                        : minuteCounter;\n                let computedHour =\n                    String(hourCounter).length === 1\n                        ? `0${hourCounter}`\n                        : hourCounter;\n\n                setSecond(computedSecond);\n                setMinute(computedMinute);\n                setHour(computedHour);\n\n                setCounter((counter) => counter + 1);\n            }, 1000);\n        }\n\n        return () => clearInterval(intervalId);\n    }, [isActive, counter]);\n\n    function stopTimer() {\n        console.log(counter);\n        setIsActive(false);\n        setCounter(0);\n        setSecond(\"00\");\n        setMinute(\"00\");\n        setHour(\"00\");\n    }\n\n    return (\n        <div className={s.container}>\n            <div className={s.time}>\n                <span className={s.hour}>{hour}</span>\n                <span>:</span>\n                <span className={s.minute}>{minute}</span>\n                <span>:</span>\n                <span className={s.second}>{second}</span>\n            </div>\n        </div>\n    );\n};\n\nexport default Stopwatch;\n"]},"metadata":{},"sourceType":"module"}