{"ast":null,"code":"const NEW_WORKLOG = 'NEW_WORKLOG';\nconst initialState = {\n  issues: [{\n    time: {\n      from: '09:00',\n      by: '10:00'\n    },\n    label: 'JRM-310',\n    name: 'Team standup',\n    timer: '01:00:00'\n  }]\n};\nexport default function issuesReducer(state = initialState, action) {\n  switch (action.type) {\n    case NEW_WORKLOG:\n      let issues = [...state.issues];\n\n      function formatTime(time) {\n        let from = Math.trunc(time[0] / 60);\n        let from2 = time[0] % 60;\n        let by = Math.trunc(time[1] / 60);\n        let by2 = time[1] % 60;\n\n        if (time[0] < 600) {\n          from = '0' + from;\n        }\n\n        if (time[1] < 600) {\n          by = '0' + by;\n        }\n\n        if (from2 === 0) {\n          from2 = '0' + from2;\n        }\n\n        if (by2 === 0) {\n          by2 = '0' + by2;\n        }\n\n        let fromResult = from + ':' + from2;\n        let byResult = by + ':' + by2;\n        return [fromResult, byResult];\n      }\n\n      let resultTime = formatTime(action.payload.sliderValue);\n      let from = resultTime[0];\n      let by = resultTime[1]; //\n      // let formatStopwatchTime = (time) => {\n      //     let hour = Math.floor(time/60);\n      //     let minutes = Math.floor((time%60)/60);\n      //     let seconds = Math.floor();\n      //     if (hour < 10) { hour = '0' + hour}\n      //     console.log(seconds);\n      //     if (minutes < 10) { minutes = '0' + minutes}\n      //     if (seconds < 10) { seconds = '0' + seconds}\n      //     let stopWatchTime = hour + ':' + minutes + ':' + seconds;\n      //     return stopWatchTime;\n      // }\n\n      let formatStopwatchTime = time => {\n        let getTime = new Date(time);\n        let hour = getTime.getHours();\n        let minutes = getTime.getMinutes();\n        let seconds = getTime.getSeconds();\n        let stopWatchTime = hour + ':' + minutes + ':' + seconds;\n        return stopWatchTime;\n      }; // let stopwatchTime = formatStopwatchTime(action.payload.stopwatchTime);\n\n\n      let stopwatchTime = formatStopwatchTime(600);\n      issues.push({\n        time: {\n          from: from,\n          by: by\n        },\n        label: action.payload.label,\n        name: action.payload.issue,\n        timer: stopwatchTime\n      });\n      return { ...state,\n        issues\n      };\n\n    default:\n      return state;\n  }\n} // export const submitForm = (label, issue) => ({\n//     type: NEW_WORKLOG, payload: {label, issue}\n// });\n\nexport const submitForm = (stopwatchTime, sliderValue, label, issue) => ({\n  type: NEW_WORKLOG,\n  payload: {\n    stopwatchTime,\n    sliderValue,\n    label,\n    issue\n  }\n});","map":{"version":3,"sources":["/home/alexeyko/Documents/React-tracker/src/store/reducers/issuesReducer.js"],"names":["NEW_WORKLOG","initialState","issues","time","from","by","label","name","timer","issuesReducer","state","action","type","formatTime","Math","trunc","from2","by2","fromResult","byResult","resultTime","payload","sliderValue","formatStopwatchTime","getTime","Date","hour","getHours","minutes","getMinutes","seconds","getSeconds","stopWatchTime","stopwatchTime","push","issue","submitForm"],"mappings":"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","sourcesContent":["const NEW_WORKLOG = 'NEW_WORKLOG';\n\nconst initialState = {\n    issues: [\n        {\n            time: {\n                from: '09:00',\n                by: '10:00'\n            },\n            label: 'JRM-310',\n            name: 'Team standup',\n            timer: '01:00:00',\n        },\n    ],\n}\n\nexport default function issuesReducer(state = initialState, action) {\n    switch (action.type) {\n        case NEW_WORKLOG:\n            let issues = [...state.issues];\n\n        function formatTime(time) {\n            let from = Math.trunc(time[0] / 60);\n            let from2 = time[0] % 60;\n            let by = Math.trunc(time[1] / 60);\n            let by2 = time[1] % 60;\n\n            if (time[0] < 600) {\n                from = '0' + from;\n            }\n            if (time[1] < 600) {\n                by = '0' + by;\n            }\n            if (from2 === 0) {\n                from2 = '0' + from2;\n            }\n            if (by2 === 0) {\n                by2 = '0' + by2;\n            }\n\n            let fromResult = from + ':' + from2;\n            let byResult = by + ':' + by2;\n            return [fromResult, byResult];\n        }\n\n            let resultTime = formatTime(action.payload.sliderValue);\n            let from = resultTime[0];\n            let by = resultTime[1];\n            //\n            // let formatStopwatchTime = (time) => {\n            //     let hour = Math.floor(time/60);\n            //     let minutes = Math.floor((time%60)/60);\n            //     let seconds = Math.floor();\n            //     if (hour < 10) { hour = '0' + hour}\n            //     console.log(seconds);\n            //     if (minutes < 10) { minutes = '0' + minutes}\n            //     if (seconds < 10) { seconds = '0' + seconds}\n            //     let stopWatchTime = hour + ':' + minutes + ':' + seconds;\n            //     return stopWatchTime;\n            // }\n            let formatStopwatchTime = (time) => {\n                let getTime = new Date(time );\n                let hour = getTime.getHours();\n                let minutes = getTime.getMinutes();\n                let seconds = getTime.getSeconds();\n\n                let stopWatchTime = hour + ':' + minutes + ':' + seconds;\n                return stopWatchTime;\n            }\n\n            // let stopwatchTime = formatStopwatchTime(action.payload.stopwatchTime);\n            let stopwatchTime = formatStopwatchTime(600);\n\n            issues.push(\n                {\n                    time: {\n                        from: from,\n                        by: by\n                    },\n                    label: action.payload.label,\n                    name: action.payload.issue,\n                    timer: stopwatchTime,\n                });\n            return {\n                ...state,\n                issues\n            };\n        default:\n            return state;\n    }\n}\n\n// export const submitForm = (label, issue) => ({\n//     type: NEW_WORKLOG, payload: {label, issue}\n// });\n\nexport const submitForm = (stopwatchTime, sliderValue, label, issue) => ({\n    type: NEW_WORKLOG, payload: {stopwatchTime, sliderValue, label, issue}\n});"]},"metadata":{},"sourceType":"module"}