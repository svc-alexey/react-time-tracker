{"ast":null,"code":"const NEW_WORKLOG = 'NEW_WORKLOG';\nconst initialState = {\n  issues: [{\n    time: {\n      from: '09:00',\n      by: '10:00'\n    },\n    label: 'JRM-310',\n    name: 'Team standup',\n    timer: '01:00:00'\n  }]\n};\nexport default function issuesReducer(state = initialState, action) {\n  switch (action.type) {\n    case NEW_WORKLOG:\n      let issues = [...state.issues];\n\n      function formatTime(time) {\n        let from = Math.trunc(time[0] / 60);\n        let from2 = time[0] % 60 / 60;\n        console.log(by2);\n        let by = Math.trunc(time[1] / 60);\n        let by2 = time[1] % 60 / 60;\n\n        if (time[0] < 600) {\n          from = '0' + from;\n        }\n\n        if (time[1] < 600) {\n          from = '0' + from;\n        }\n\n        if (by === 0) {\n          by = '0' + by;\n        }\n\n        if (by2 === 0) {\n          by2 = '0' + by2;\n        }\n\n        let fromResult = from + ':' + from2;\n        let byResult = by + ':' + by2;\n        return [fromResult, byResult];\n      }\n\n      let resultTime = formatTime(action.payload.sliderValue);\n      let from = resultTime[0];\n      let by = resultTime[1];\n\n      let formatStopwatchTime = time => {\n        let hour = Math.floor(time / 60);\n        let minutes = Math.floor(time % 60 / 60);\n        let seconds = Math.floor((hour + minutes) % time / 60);\n\n        if (hour >= 10) {\n          hour = '0' + hour;\n        }\n\n        if (minutes >= 10) {\n          minutes = '0' + minutes;\n        }\n\n        if (seconds >= 10) {\n          seconds = '0' + seconds;\n        }\n\n        let stopWatchTime = hour + ':' + minutes + ':' + seconds;\n        return stopWatchTime;\n      };\n\n      let stopwatchTime = formatStopwatchTime(action.payload.stopwatchTime);\n      issues.push({\n        time: {\n          from: from,\n          by: by\n        },\n        label: action.payload.label,\n        name: action.payload.issue,\n        timer: stopwatchTime\n      });\n      return { ...state,\n        issues\n      };\n\n    default:\n      return state;\n  }\n} // export const submitForm = (label, issue) => ({\n//     type: NEW_WORKLOG, payload: {label, issue}\n// });\n\nexport const submitForm = (stopwatchTime, sliderValue, label, issue) => ({\n  type: NEW_WORKLOG,\n  payload: {\n    stopwatchTime,\n    sliderValue,\n    label,\n    issue\n  }\n});","map":{"version":3,"sources":["/home/alexeyko/Documents/React-tracker/src/store/reducers/issuesReducer.js"],"names":["NEW_WORKLOG","initialState","issues","time","from","by","label","name","timer","issuesReducer","state","action","type","formatTime","Math","trunc","from2","console","log","by2","fromResult","byResult","resultTime","payload","sliderValue","formatStopwatchTime","hour","floor","minutes","seconds","stopWatchTime","stopwatchTime","push","issue","submitForm"],"mappings":"AAAA,MAAMA,WAAW,GAAG,aAApB;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,MAAM,EAAE,CACJ;AACIC,IAAAA,IAAI,EAAE;AACFC,MAAAA,IAAI,EAAE,OADJ;AAEFC,MAAAA,EAAE,EAAE;AAFF,KADV;AAKIC,IAAAA,KAAK,EAAE,SALX;AAMIC,IAAAA,IAAI,EAAE,cANV;AAOIC,IAAAA,KAAK,EAAE;AAPX,GADI;AADS,CAArB;AAcA,eAAe,SAASC,aAAT,CAAuBC,KAAK,GAAGT,YAA/B,EAA6CU,MAA7C,EAAqD;AAChE,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKZ,WAAL;AACI,UAAIE,MAAM,GAAG,CAAC,GAAGQ,KAAK,CAACR,MAAV,CAAb;;AAEJ,eAASW,UAAT,CAAoBV,IAApB,EAA0B;AACtB,YAAIC,IAAI,GAAGU,IAAI,CAACC,KAAL,CAAWZ,IAAI,CAAC,CAAD,CAAJ,GAAU,EAArB,CAAX;AACA,YAAIa,KAAK,GAAIb,IAAI,CAAC,CAAD,CAAJ,GAAU,EAAX,GAAe,EAA3B;AACAc,QAAAA,OAAO,CAACC,GAAR,CAAYC,GAAZ;AACA,YAAId,EAAE,GAAGS,IAAI,CAACC,KAAL,CAAWZ,IAAI,CAAC,CAAD,CAAJ,GAAU,EAArB,CAAT;AACA,YAAIgB,GAAG,GAAIhB,IAAI,CAAC,CAAD,CAAJ,GAAU,EAAX,GAAe,EAAzB;;AAEA,YAAIA,IAAI,CAAC,CAAD,CAAJ,GAAU,GAAd,EAAmB;AACfC,UAAAA,IAAI,GAAG,MAAMA,IAAb;AACH;;AACD,YAAID,IAAI,CAAC,CAAD,CAAJ,GAAU,GAAd,EAAmB;AACfC,UAAAA,IAAI,GAAG,MAAMA,IAAb;AACH;;AACD,YAAIC,EAAE,KAAK,CAAX,EAAc;AACVA,UAAAA,EAAE,GAAE,MAAMA,EAAV;AACH;;AACD,YAAIc,GAAG,KAAK,CAAZ,EAAe;AACXA,UAAAA,GAAG,GAAE,MAAMA,GAAX;AACH;;AAED,YAAIC,UAAU,GAAGhB,IAAI,GAAG,GAAP,GAAaY,KAA9B;AACA,YAAIK,QAAQ,GAAGhB,EAAE,GAAG,GAAL,GAAWc,GAA1B;AACA,eAAO,CAACC,UAAD,EAAYC,QAAZ,CAAP;AACH;;AAEG,UAAIC,UAAU,GAAGT,UAAU,CAACF,MAAM,CAACY,OAAP,CAAeC,WAAhB,CAA3B;AACA,UAAIpB,IAAI,GAAGkB,UAAU,CAAC,CAAD,CAArB;AACA,UAAIjB,EAAE,GAAGiB,UAAU,CAAC,CAAD,CAAnB;;AAEA,UAAIG,mBAAmB,GAAItB,IAAD,IAAU;AAChC,YAAIuB,IAAI,GAAGZ,IAAI,CAACa,KAAL,CAAWxB,IAAI,GAAC,EAAhB,CAAX;AACA,YAAIyB,OAAO,GAAGd,IAAI,CAACa,KAAL,CAAYxB,IAAI,GAAC,EAAN,GAAU,EAArB,CAAd;AACA,YAAI0B,OAAO,GAAGf,IAAI,CAACa,KAAL,CAAY,CAACD,IAAI,GAACE,OAAN,IAAezB,IAAhB,GAAsB,EAAjC,CAAd;;AACA,YAAIuB,IAAI,IAAI,EAAZ,EAAgB;AAAEA,UAAAA,IAAI,GAAG,MAAMA,IAAb;AAAkB;;AACpC,YAAIE,OAAO,IAAI,EAAf,EAAmB;AAAEA,UAAAA,OAAO,GAAG,MAAMA,OAAhB;AAAwB;;AAC7C,YAAIC,OAAO,IAAI,EAAf,EAAmB;AAAEA,UAAAA,OAAO,GAAG,MAAMA,OAAhB;AAAwB;;AAC7C,YAAIC,aAAa,GAAGJ,IAAI,GAAG,GAAP,GAAaE,OAAb,GAAuB,GAAvB,GAA6BC,OAAjD;AACA,eAAOC,aAAP;AACH,OATD;;AAWA,UAAIC,aAAa,GAAGN,mBAAmB,CAACd,MAAM,CAACY,OAAP,CAAeQ,aAAhB,CAAvC;AAEA7B,MAAAA,MAAM,CAAC8B,IAAP,CACI;AACI7B,QAAAA,IAAI,EAAE;AACFC,UAAAA,IAAI,EAAEA,IADJ;AAEFC,UAAAA,EAAE,EAAEA;AAFF,SADV;AAKIC,QAAAA,KAAK,EAAEK,MAAM,CAACY,OAAP,CAAejB,KAL1B;AAMIC,QAAAA,IAAI,EAAEI,MAAM,CAACY,OAAP,CAAeU,KANzB;AAOIzB,QAAAA,KAAK,EAAEuB;AAPX,OADJ;AAUA,aAAO,EACH,GAAGrB,KADA;AAEHR,QAAAA;AAFG,OAAP;;AAIJ;AACI,aAAOQ,KAAP;AA7DR;AA+DH,C,CAED;AACA;AACA;;AAEA,OAAO,MAAMwB,UAAU,GAAG,CAACH,aAAD,EAAgBP,WAAhB,EAA6BlB,KAA7B,EAAoC2B,KAApC,MAA+C;AACzErB,EAAAA,IAAI,EAAEZ,WADmE;AACtDuB,EAAAA,OAAO,EAAE;AAACQ,IAAAA,aAAD;AAAgBP,IAAAA,WAAhB;AAA6BlB,IAAAA,KAA7B;AAAoC2B,IAAAA;AAApC;AAD6C,CAA/C,CAAnB","sourcesContent":["const NEW_WORKLOG = 'NEW_WORKLOG';\n\nconst initialState = {\n    issues: [\n        {\n            time: {\n                from: '09:00',\n                by: '10:00'\n            },\n            label: 'JRM-310',\n            name: 'Team standup',\n            timer: '01:00:00',\n        },\n    ],\n}\n\nexport default function issuesReducer(state = initialState, action) {\n    switch (action.type) {\n        case NEW_WORKLOG:\n            let issues = [...state.issues];\n\n        function formatTime(time) {\n            let from = Math.trunc(time[0] / 60);\n            let from2 = (time[0] % 60)/60;\n            console.log(by2);\n            let by = Math.trunc(time[1] / 60);\n            let by2 = (time[1] % 60)/60;\n\n            if (time[0] < 600) {\n                from = '0' + from;\n            }\n            if (time[1] < 600) {\n                from = '0' + from;\n            }\n            if (by === 0) {\n                by= '0' + by;\n            }\n            if (by2 === 0) {\n                by2= '0' + by2;\n            }\n\n            let fromResult = from + ':' + from2;\n            let byResult = by + ':' + by2;\n            return [fromResult,byResult];\n        }\n\n            let resultTime = formatTime(action.payload.sliderValue);\n            let from = resultTime[0];\n            let by = resultTime[1];\n\n            let formatStopwatchTime = (time) => {\n                let hour = Math.floor(time/60);\n                let minutes = Math.floor((time%60)/60);\n                let seconds = Math.floor(((hour+minutes)%time)/60);\n                if (hour >= 10) { hour = '0' + hour}\n                if (minutes >= 10) { minutes = '0' + minutes}\n                if (seconds >= 10) { seconds = '0' + seconds}\n                let stopWatchTime = hour + ':' + minutes + ':' + seconds;\n                return stopWatchTime;\n            }\n\n            let stopwatchTime = formatStopwatchTime(action.payload.stopwatchTime);\n\n            issues.push(\n                {\n                    time: {\n                        from: from,\n                        by: by\n                    },\n                    label: action.payload.label,\n                    name: action.payload.issue,\n                    timer: stopwatchTime,\n                });\n            return {\n                ...state,\n                issues\n            };\n        default:\n            return state;\n    }\n}\n\n// export const submitForm = (label, issue) => ({\n//     type: NEW_WORKLOG, payload: {label, issue}\n// });\n\nexport const submitForm = (stopwatchTime, sliderValue, label, issue) => ({\ntype: NEW_WORKLOG, payload: {stopwatchTime, sliderValue, label, issue}\n});"]},"metadata":{},"sourceType":"module"}