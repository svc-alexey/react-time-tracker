{"ast":null,"code":"const NEW_WORKLOG = 'NEW_WORKLOG';\nconst initialState = {\n  issues: [{\n    time: {\n      from: '09:00',\n      by: '10:00'\n    },\n    label: 'JRM-310',\n    name: 'Team standup',\n    timer: '01:00:00'\n  }]\n};\nexport default function issuesReducer(state = initialState, action) {\n  switch (action.type) {\n    case NEW_WORKLOG:\n      debugger;\n      let issues = [...state.issues];\n\n      function formatTime(time) {\n        let a = Math.trunc(time[0] / 60);\n        let b = time[1] % 60;\n\n        if (time[0] < 600) {\n          a = '0' + a;\n        }\n\n        if (b === 0) {\n          b = '0' + b;\n        }\n\n        return [a, b];\n      }\n\n      let resultTime = formatTime(action.payload.sliderValue);\n      let from = resultTime[0];\n      let by = resultTime[1];\n\n      let formatStopwatchTime = time => {\n        let hour = Math.floor(time / 60);\n        let minutes = Math.floor(time % 60 / 60);\n        let seconds = Math.floor((hour + minutes) % time / 60);\n\n        if (hour >= 10) {\n          hour = '0' + hour;\n        }\n\n        if (minutes >= 10) {\n          minutes = '0' + minutes;\n        }\n\n        if (seconds >= 10) {\n          seconds = '0' + seconds;\n        }\n\n        let stopWatchTime = hour + ':' + minutes + ':' + seconds;\n        return stopWatchTime;\n      };\n\n      let stopwatchTime = formatStopwatchTime(action.payload.stopwatchTime);\n      issues.push({\n        time: {\n          from: from,\n          by: by\n        },\n        label: action.payload.label,\n        name: action.payload.issue,\n        timer: stopwatchTime\n      });\n      return { ...state,\n        issues\n      };\n\n    default:\n      return state;\n  }\n}\nexport const submitForm = (label, issue) => ({\n  type: NEW_WORKLOG,\n  payload: {\n    label,\n    issue\n  }\n}); // export const submitForm = (stopwatchTime, sliderValue, label, issue) => ({\n// type: NEW_WORKLOG, payload: {stopwatchTime, sliderValue, label, issue}\n// });","map":{"version":3,"sources":["/home/alexeyko/Documents/React-tracker/src/store/reducers/issuesReducer.js"],"names":["NEW_WORKLOG","initialState","issues","time","from","by","label","name","timer","issuesReducer","state","action","type","formatTime","a","Math","trunc","b","resultTime","payload","sliderValue","formatStopwatchTime","hour","floor","minutes","seconds","stopWatchTime","stopwatchTime","push","issue","submitForm"],"mappings":"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","sourcesContent":["const NEW_WORKLOG = 'NEW_WORKLOG';\n\nconst initialState = {\n    issues: [\n        {\n            time: {\n                from: '09:00',\n                by: '10:00'\n            },\n            label: 'JRM-310',\n            name: 'Team standup',\n            timer: '01:00:00',\n        },\n    ],\n}\n\nexport default function issuesReducer(state = initialState, action) {\n    switch (action.type) {\n        case NEW_WORKLOG:\n            debugger;\n            let issues = [...state.issues];\n\n        function formatTime(time) {\n            let a = Math.trunc(time[0] / 60);\n            let b = time[1] % 60;\n            if (time[0] < 600) {\n                a = '0' + a;\n            }\n            if (b === 0) {\n                b = '0' + b;\n            }\n            return [a,b];\n        }\n\n            let resultTime = formatTime(action.payload.sliderValue);\n            let from = resultTime[0];\n            let by = resultTime[1];\n\n            let formatStopwatchTime = (time) => {\n                let hour = Math.floor(time/60);\n                let minutes = Math.floor((time%60)/60);\n                let seconds = Math.floor(((hour+minutes)%time)/60);\n                if (hour >= 10) { hour = '0' + hour}\n                if (minutes >= 10) { minutes = '0' + minutes}\n                if (seconds >= 10) { seconds = '0' + seconds}\n                let stopWatchTime = hour + ':' + minutes + ':' + seconds;\n                return stopWatchTime;\n            }\n\n            let stopwatchTime = formatStopwatchTime(action.payload.stopwatchTime);\n\n            issues.push(\n                {\n                    time: {\n                        from: from,\n                        by: by\n                    },\n                    label: action.payload.label,\n                    name: action.payload.issue,\n                    timer: stopwatchTime,\n                });\n            return {\n                ...state,\n                issues\n            };\n        default:\n            return state;\n    }\n}\n\nexport const submitForm = (label, issue) => ({\n    type: NEW_WORKLOG, payload: {label, issue}\n});\n\n// export const submitForm = (stopwatchTime, sliderValue, label, issue) => ({\n// type: NEW_WORKLOG, payload: {stopwatchTime, sliderValue, label, issue}\n// });"]},"metadata":{},"sourceType":"module"}